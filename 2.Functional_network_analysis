### Differential expression and network analysis of RNA-seq data


## ----------------- Differential expression------------------------##


## ------ load 24 samples' gene expression profile  ------

load("sample24s_list.rda")
filter_count<- sample24s_list$filter_count


## ------ define two-two labels for comparision  ------
#arg1:control ; arg2: treat。 
rundeseq  <- function(arg1, arg2) {
  
  # DEG results
  res <- results(DE_dds, contrast=c("condition", arg2, arg1))
  # filtering
  diff_gene <<- as.data.frame(subset(res, padj < 0.05 & abs(log2FoldChange) >= 2))
}

## ------ deine two-two comparison function ------
#arg1:control ; arg2: treat。 
rundeseq  <- function(arg1, arg2) {
  
  # DEG analysis
  res <- results(DE_dds, contrast=c("condition", arg2, arg1))
  # filtering
  diff_gene <<- as.data.frame(subset(res, padj < 0.05 & abs(log2FoldChange) >= 1))

}


## -----  volcano plot -------
library(ggplot2)
volcano_plot <- function(df,name1, name2){
  pdf(paste(paste(name1, name2, sep = "_"),'_volcanoplot.pdf',sep = ""))
  p <-  ggplot(df,aes(x=log2FoldChange,y = -log10(padj)))+
    geom_point(aes(color=group))+
    scale_color_manual(values = c("#F26430","grey","#2364AA"),
                       limit = c('Up','Notsig',"Down"))+
    theme_bw(base_size = 20)+
    ggtitle("Volcano Plot")+
    theme(plot.title = element_text(size=30,hjust = 0.5))+
    coord_cartesian(xlim = c(-5,5),ylim = c(0,75))
  print(p)
  dev.off()
}

 
## ---------- DEG |logFC| >1 ---------

library(DESeq2)
# dds object
condition <- as.factor(rep(c("all_Y", "all_J", "all_Z", "all_C"),6))
colData <- data.frame(row.names = colnames(filter_count), condition)
dds <- DESeqDataSetFromMatrix(countData = filter_count, colData = colData, 
                              design = ~ condition)
DE_dds <- DESeq(dds)


# 1. stem、main_root、lateral_root vs leaf
arg1 = "all_Y"
sample = c("all_J", "all_Z", "all_C")

for (arg2 in sample) {
  rundeseq(arg1, arg2)
  varname <- paste(arg2, "Y_dset", sep = '')
  assign(varname, diff_gene)
}


# 2. main_root & lateral_root  vs stem
arg1 = "all_J"
sample = c("all_Z", "all_C")

for (arg2 in sample) {
  rundeseq(arg1, arg2)
  varname <- paste(arg2, "J_dset", sep = '')
  assign(varname, diff_gene)
}


# 3. lateral_root vs main_root
arg1 = "all_Z"
sample = "all_C"

for (arg2 in sample) {
  rundeseq(arg1, arg2)
  varname <- paste(arg2, "Z_dset", sep = '')
  assign(varname, diff_gene)
}


## all DEG sets
alldgset <- unique(c(rownames(all_CY_dset), rownames(all_JY_dset),
                     rownames(all_ZY_dset), rownames(all_CJ_dset), 
                     rownames(all_ZJ_dset), rownames(all_CZ_dset)))

dgset_list_FC1 <- list(all_JY_dset = all_JY_dset,
                   all_ZY_dset = all_ZY_dset,
                   all_CY_dset = all_CY_dset,
                   all_ZJ_dset = all_ZJ_dset,
                   all_CJ_dset = all_CJ_dset,
                   all_CZ_dset = all_CZ_dset,
                   alldgset = alldgset)

save(dgset_list_FC1, file = "dgset_list_FC1.rda")



##------------------ pathway gene -------------------------------##

## get genes in the interesting pathways 
#1
GGPPS <- unique(read.table("gelist/GGPPS.geid"))
data1 <- data.frame(geneid = GGPPS$V1,
                    type = rep("GGPPS",length(GGPPS[,1])),
                    color = rep("#35B2FD",length(GGPPS[,1])))

#2
cps <- unique(read.table("gelist/CPS.txt"))
data2 <- data.frame(geneid = cps$V1,
                    type = rep("CPS",length(cps[,1])),
                    color = rep("#F76DAB",length(cps[,1])))


#3
ks <- unique(read.table("gelist/KS.txt"))
data3 <- data.frame(geneid = ks$V1,
                    type = rep("KS",length(ks[,1])),
                    color = rep("#F09B5C",length(ks[,1])))


#4
tps <- unique(read.table("gelist/TPS.geid"))
data4 <- data.frame(geneid = tps$V1,
                    type = rep("TPS",length(tps[,1])),
                    color = rep("#A5D0A8",length(tps[,1])))


#5
atf <- unique(read.table("gelist/ATF.geid")) 
data5 <- data.frame(geneid = atf$V1,
                    type = rep("ATF",length(atf[,1])),
                    color = rep("#3690C0",length(atf[,1])))


atfa <- unique(read.table("gelist/ATF_ser.geid")) 
data5a <- data.frame(geneid = atfa$V1,
                    type = rep("ATFser",length(atfa[,1])),
                    color = rep("#3690C0",length(atfa[,1])))


#6
kox <- unique(read.table("gelist/p450kox.geid"))
data6 <- data.frame(geneid = kox$V1,
                    type = rep("KOX",length(kox[,1])),
                    color = rep("#F6591E",length(kox[,1])))


#7
p450 <- unique(read.table("gelist/p450id"))
data7 <- data.frame(geneid = p450$V1,
                    type = rep("P450",length(p450[,1])),
                    color = rep("#99D8C9",length(p450[,1])))

#8
#bahd <- unique(read.table("gelist/BAHD.geid")) #find in the genome
#data8 <- data.frame(geneid = bahd$V1,
#                    type = rep("BAHD",length(bahd[,1])),
#                    color = rep("#3E885B",length(bahd[,1])))

bahd1 <- unique(read.table("gelist/wut-bahd-pfam.list")) # pfam :31个
data8_1 <- data.frame(geneid = bahd1$V1,
                      type = rep("BAHD",length(bahd1[,1])),
                      color = rep("#70D24F",length(bahd1[,1])))
 
#9
ome <- unique(read.table("gelist/Ome.geid"))
data9 <- data.frame(geneid = ome$V1,
                    type = rep("OMe",length(ome[,1])),
                    color = rep("#FEC44F",length(ome[,1])))

#10
erg <- unique(read.table("gelist/ERG.geid"))
data10 <- data.frame(geneid = erg$V1, 
                    type = rep("ERG",length(erg[,1])),
                    color = rep("#034E7B",length(erg[,1])))




# mulit-omic data integration
pathwaygene_v1 <- dplyr::bind_rows(list(data1, data2, data3, data4, data5, 
                                        data5a, data6, data7, data8_1,
                                        data9, data10))
pathwaygene_v1$geneid2 <- gsub("\\.\\d", "", pathwaygene_v1$geneid)


table(pathwaygene_v1$type) #1118（1048）
#ATF ATFser   BAHD    ERG  GGPPS    KOX     KS    OMe   P450    CPS    TPS 
#295     12    16     8     25     18     10    133    521      7     58 



## GEP of pathway related genes

load("sample24s_list.rda")

filter_count <- sample24s_list$filter_exprvst
filter_exprvst <- sample24s_list$filter_exprvst
filter_mean <- sample24s_list$gene_vstmean


# 1.GEP of Pathway related genes
pathge_count <- na.omit(filter_count[pathwaygene_v1$geneid2,])
pathwaygene_v2 <- pathwaygene_v1[pathwaygene_v1$geneid2 %in% 
                                 rownames(pathge_count),] 

table(pathwaygene_v2$type) #464(443 genes)
#ATF ATFser   BAHD    CPS    ERG  GGPPS    KOX     KS    OMe   P450    TPS 
#65      4    16      3      3     10      6      6     53    267     16 




# 2. DEG in the interesting pathways
# FC1 ( this part were uesed for downstream network analysis)
degeset_FC1 <- sample24s_list$degest_FC1
dgcount <- na.omit(filter_count[degeset_FC1$alldgset,])

pathwaygene_v3FC1 <- pathwaygene_v1[pathwaygene_v1$geneid2 %in% 
                                    rownames(dgcount),] 
table(pathwaygene_v3FC1$type) #332（315个）
#ATF    ATFser      BAHD        CPS       ERG     GGPPS 
#43         4         12         3         2         7 
#KOX        KS       OMe      P450       TPS 
#4         5        41       198        13 



## combine all DEGs in the interesting pathways

pathway_list <- list(pathwaygene_v1 = pathwaygene_v1,
                     pathwaygene_v2 = pathwaygene_v2,
                     pathwaygene_v3FC1 = pathwaygene_v3FC1,
                     filter_exprvst = filter_exprvst,
                     gene_vstmean = sample24s_list$gene_vstmean)

save(pathway_list, file = "pathway_list.rda")


type <- c("GGPPS","KS","CPS","KOX","ATF","BAHD",
          "P450","OMe","ERG")


#test genes in the interesting pathways' expression levels

excel <- dplyr::left_join(pathwaygene_v1, pathwaygene_v2, by="geneid2") 
excel[is.na(excel)] <-  "F"
excel[excel$geneid.y != "F", 5] <- "TRUE"
excel <- excel[,c(1:5)]



#test genes in the interesting pathways' were DEGs or not（FC1）

excel1 <- dplyr::left_join(excel, pathwaygene_v3FC1, by="geneid2") 
excel1[is.na(excel1)] <-  "F1"
excel1[excel1$geneid != "F1", 6] <- "TRUE"
excel1 <- excel1[,c(1:6)]



#test genes in the interesting pathways' were DEGs or no（FC2）

excel2 <- dplyr::left_join(excel1, pathwaygene_v3FC2, by="geneid2") 
excel2[is.na(excel2)] <-  "F2"
excel2[excel2$geneid.y.y != "F2", 7] <- "TRUE"
excel2 <- excel2[,c(1:7)]

#
excel3 <- excel2[,c(1,2,5:7)]
excel3 <- excel3[!duplicated(excel3),] #removed duplicate

pathway_gene_list <- excel3[excel3$type.x %in% type,] #1051个
colnames(pathway_gene_list) <- c("Pathway gene", "Gene family", "EXpression", 
                                 "DEG1","DEG2")


#
library(xlsx)
write.xlsx(pathway_gene_list, file = "pathway_gene_list.xlsx")







##----------------- network analysis ----------------------------##


library(reshape2)
library(stringr)
library(WGCNA)
options(stringsAsFactors = FALSE)
allowWGCNAThreads(7)


library(igraph)
library(dplyr)
library(reshape2)


library(tidyverse)
library(ggraph)
library(tidygraph)


## GEPs
pathwaygene_v2 <- pathway_list$pathwaygene_v2
pathwaygene_v3FC1 <- pathway_list$pathwaygene_v3FC1

filter_exprvst <- pathway_list$filter_exprvst
gene_vstmean <- pathway_list$gene_vstmean


#DEG set as (|logFC|>=1)

type <-  c("GGPPS","KS","CPS","KOX",
           "ATF","BAHD","P450","OMe","ERG") # 9 gene familyies,315 genes

pathwaygenefc1 <- pathwaygene_v3FC1[pathwaygene_v3FC1$type %in% type,]



run_WGCNA <- function(all_exprvst, type) {
   ## 1. input data
  dim(all_exprvst)
  print(dim(all_exprvst))

  #m.mad <- apply(all_exprvst,1,mad)
  #allExprVar <- all_exprvst[which(m.mad > max(quantile(m.mad, probs=seq(0, 1, 0.25))[2],0.01)),]
  #allExprVar <- all_exprvst
  
  #DEGs
  allExprDEG <- all_exprvst
   
  allExpr <- as.data.frame(t(allExprDEG))
  
  gsg = goodSamplesGenes(allExpr, verbose = 3)
  
  if (!gsg$allOK){
    # Optionally, print the gene and sample names that were removed:
    if (sum(!gsg$goodGenes)>0) 
      printFlush(paste("Removing genes:", 
                       paste(names(allExpr)[!gsg$goodGenes], collapse = ",")));
    if (sum(!gsg$goodSamples)>0) 
      printFlush(paste("Removing samples:", 
                       paste(rownames(allExpr)[!gsg$goodSamples], collapse = ",")));
    # Remove the offending genes and samples from the data:
    allExpr = allExpr[gsg$goodSamples, gsg$goodGenes]
  }
  
  nGenes = ncol(allExpr)
  nSamples = nrow(allExpr)
  
  
  print(dim(allExpr))
  
  
  ## 2.1 sample2sample clustering
  sampleTree = hclust(dist(allExpr), method = "average")
  
  #  
  #plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="")
  
  # remove outler
  #abline(h = 160, col = "red")
  #clust = cutreeStatic(sampleTree, cutHeight = 155, minSize = 10) table(clust) keepSamples = (clust==1) datExpr0 = datExpr0[keepSamples, ]
  
  
  ## soft thresholding power (beta)
  powers = c(c(1:10), seq(from = 12, to=30, by=2))
  sft = pickSoftThreshold(allExpr, powerVector=powers, networkType = "unsigned", verbose=5)
  
  
  #
  power = sft$powerEstimate
  print(paste("power: ",power))
  
  ## choose best beta for thresholding power 
  if (is.na(power)){
    power = ifelse(nSamples<20, ifelse(type == "unsigned", 9, 18),
                   ifelse(nSamples<30, ifelse(type == "unsigned", 8, 16),
                          ifelse(nSamples<40, ifelse(type == "unsigned", 7, 14),
                                 ifelse(type == "unsigned", 6, 12))       
                   )
    )
  }
  
  print(paste("new_power: ",power))
  
  
  ## co-expression network
  net = blockwiseModules(allExpr, power = power, maxBlockSize = nGenes,
                         TOMType = type, minModuleSize = 30,
                         reassignThreshold = 0, mergeCutHeight = 0.25,
                         numericLabels = TRUE, pamRespectsDendro = FALSE,
                         saveTOMs = TRUE, corType = "pearson", loadTOMs = TRUE,
                         saveTOMFileBase = "WUTOU-all.tom",
                         verbose = 3)
  
  ##   
  # Convert labels to colors for plotting
  moduleLabels = net$colors
  moduleColors = labels2colors(moduleLabels)
  
  print(" net END！")
  
  ## 4. TOM plot 
  
  TOM = TOMsimilarityFromExpr(allExpr, power=power, corType="pearson", 
                              networkType="unsigned") 
  ## Loading objects:
  TOM <- as.matrix(TOM)

  probes = colnames(allExpr)
  dimnames(TOM) <- list(probes, probes)
  
  # Export the network into edge and node list files Cytoscape can read
  # threshold 
  cyt = exportNetworkToCytoscape(TOM,
                                 edgeFile = paste("wutou-pathway", ".edges.txt", sep=""),
                                 nodeFile = paste("wutou-pathway", ".nodes.txt", sep=""),
                                 weighted = TRUE, threshold = 0,
                                 nodeNames = probes, nodeAttr = moduleColors)
  
  save(cyt, file = "outNetworkToCytfile.rda")

  
}

## 
## MST anlysis of the co-expression network

pathway_expvst <- filter_exprvst[pathwaygenefc1$geneid2,]
run_WGCNA(all_exprvst = pathway_expvst, type = "unsigned")

## load the co-expression netwrok
network <- read.csv("wutou-pathway.edges.txt", sep="\t", header=T)



## filter the raw co-expression network
filter_net0.15 <- network[which(network$weight > 0.15),] 

filterlist <- unique(c(filter_net0.15$fromNode, filter_net0.15$toNode)) 
type0.15 <- pathwaygene_v2[pathwaygene_v2$geneid2 %in% filterlist,]

table(type0.15$type) # 280个gene 
#ATF ATFser   BAHD    CPS    ERG  GGPPS    KOX     KS    OMe   P450    TPS 
#40      4      9      3      2      6      2      4     38    165      7 



# 2. keep top 20% weight nodes of each genes

denetorder <- filter_net0.15[order(filter_net0.15$fromNode,
                                  filter_net0.15$weight, decreasing = T),] 

filter_edge <- data.frame()
for (var in unique(denetorder$fromNode)) {
  
  data <- denetorder[which(denetorder$fromNode == var),]
  if(nrow(data) > 1){
    filter <- data[1:floor(nrow(data)*0.2+0.5),]
    filter_edge <- rbind(filter_edge, filter)
    
  }else{
    filter_edge <- rbind(filter_edge, data)
  }
}


## Visualization co-expression network 

## filter solar nodes

filter_g = graph_from_data_frame(d=filter_edge[, c(1,2)], directed=F)                          

graph_gt <- as_tbl_graph(filter_g)
set.seed(194);ggraph(graph_gt, layout = 'stress') + 
  geom_edge_fan(color="#7DC9E5", show.legend=FALSE) +
  geom_node_point(shape=21,stroke = 0.5, colour = "white")+ 
  geom_node_text(aes(label=name), size=2)


omit_nodes <- read.table("omit_node1.txt")
filter_g1 <- delete_vertices(filter_g, omit_nodes$V1)

#
V <- as.data.frame(cbind(V(filter_g1), V(filter_g1)$color))
V$geneid2 <- rownames(V)
Vtype <- dplyr::left_join(V, pathwaygenefc1, by="geneid2") 

table(Vtype$type) #231 genes
#ATF  BAHD   CPS GGPPS   KOX    KS   OMe  P450 
#36     8     3     4     2     4    32   142 

write.table(Vtype[,c(1,2,4)], file = "gene231list.txt", sep = "\t", 
            row.names = F, quote = F)


# vertex.nodes.colors
Vtype$size <- degree(filter_g1)
Vtype[which(Vtype$size < 30) , 6] <- 20

Vtype$word <- Vtype$size
Vtype[which(Vtype$word > 50) , 7] <- 60

Vtype[which(Vtype$word < 35) , 7] <- 30


# all id
set.seed(345)
plot(filter_g1, 
     layout=	layout_on_sphere, 
     vertex.size= Vtype$size*0.08,
     #vertex.label.dist= 0.5,
     vertex.label.color="black", asp= 0.5,
     vertex.label.cex= Vtype$word*0.02,
     vertex.color= Vtype$color,
     #edge.curved=TRUE,
     edge.width=0.1, edge.arrow.mode=0)

# partial id

Vtype$word2 <- Vtype$size
Vtype[which(Vtype$word2 > 35) , 8] <- 60
Vtype[which(Vtype$word2 < 30) , 8] <- 0.01


pdf("WGCNA_network_allid.pdf", height = 18, width = 15)
set.seed(345)
plot(filter_g1, 
     layout=	layout_on_sphere, 
     vertex.size= Vtype$size*0.08,
     #vertex.label.dist= 0.5,
     vertex.label.color="black", asp= 0.5,
     vertex.label.cex= Vtype$word2*0.02,
     vertex.color= Vtype$color,
     #edge.curved=TRUE,
     edge.width=0.1, edge.arrow.mode=0)

dev.off()

## MST 
filter_g_mst <- mst(filter_g1)


#nodes color
Vftype_mst  <- as.data.frame(degree(filter_g_mst))
Vftype_mst$geneid2 <- rownames(Vftype_mst)
Vftype_mst1 <- dplyr::left_join(Vftype_mst, Vtype, by="geneid2")


# node size
Vftype_mst1$size <- Vftype_mst1$`degree(filter_g_mst)`

Vftype_mst1[which(Vftype_mst1$size >= 3),7] <- 3
Vftype_mst1[which(Vftype_mst1$size == 2),7] <- 2.3
Vftype_mst1[which(Vftype_mst1$size == 1),7] <- 2

# node front size
Vftype_mst1$word <- Vftype_mst1$size

Vftype_mst1[which(Vftype_mst1$word < 3),8] <- 0.001
Vftype_mst1[which(Vftype_mst1$word == 3),8] <- 1.2


# labeled id with degree>3
set.seed(345)
plot(filter_g_mst, 
     layout=layout_nicely, 
     vertex.size= as.numeric(Vftype_mst1$size),
     #vertex.label.dist= 0.5,
     vertex.label.color="black", asp= 0.5,
     vertex.label.cex= as.numeric(Vftype_mst1$word),
     vertex.color= Vtype$color,
     edge.width=0.2, edge.arrow.mode=0)



# all nodes id
set.seed(345)
plot(filter_g_mst, 
     layout=layout_nicely, 
     vertex.size= 2.5,
     #vertex.label.dist= 0.5,
     vertex.label.color="black", asp= 0.5,
     vertex.label.cex= 0.6,
     vertex.color= Vtype$color,
     edge.width=0.2, edge.arrow.mode=0)



# save network
networklist <- list(filter_g = filter_g,
                    filter_g1 = filter_g1,
                    filter_g_mst = filter_g_mst)
save(networklist, file = "networklist.rda")


